#!/usr/bin/env python

import sys
import time
import zmq
import random
import cloudpickle as pickle


DEFAULT_ROUTER = "tcp://localhost:8797"
READY_PAYLOAD = [ b'READY', b'' ]
RECONNECT_TIMEOUT = 10*1000


class Worker:
    def __init__(self, router):
        self.router = router        
        self.connect()
    
    def connect(self):
        
        self.context = zmq.Context.instance()
        self.socket = self.context.socket(zmq.DEALER)
        self.taskdefs = {}
        self.socket.connect(self.router)

    def loop(self):
        while True:
            payload = self.get_task()
            if payload is None:
                time.sleep(0.1)
            else:
                self.process(payload)
    
    def get_task(self):
        self.socket.send_multipart(READY_PAYLOAD)
        events = self.socket.poll(RECONNECT_TIMEOUT)
        if events == 1:
            message = self.socket.recv_multipart()
            if message[0] == b'TASK':
                return message
            else:
                print('UNEXPECTED MESSAGE', message)
                return None
        else:
            return None

    def recv(self):
        events = self.socket.poll(RECONNECT_TIMEOUT)
        if events == 1:
            message = self.socket.recv_multipart()
            return message
        else:
            return None

    def process(self,payload):        
        command, client_address, task = payload
        uid, instance_id, fxname, args, params = pickle.loads(task)   
        taskobj = self.get_taskdef(instance_id)
        if taskobj is not None:
            fx = getattr(taskobj, fxname)
            try:
                result = fx(*args, **params)
                payload = [
                    b'RESULT',                       
                    pickle.dumps([client_address, uid,result])
                ]
                self.socket.send_multipart(payload)
            except Exception as exception:
                payload = [
                    b'EXCEPTION',                       
                    pickle.dumps([client_address, uid, exception])
                ]
                self.socket.send_multipart(payload)
        else:
            payload = [
                b'EXCEPTION',                       
                pickle.dumps([client_address, uid, 'TASKDEF NOT FOUND'])
            ]
            self.socket.send_multipart(payload)

    def get_taskdef(self, instance_id):
        if not instance_id in self.taskdefs:        
            request_payload = [
                b'TASKDEF',
                instance_id
            ]
            self.socket.send_multipart(request_payload)
            command, payload = self.recv()
            task = pickle.loads(payload)
            self.taskdefs[instance_id] = task
        
        return self.taskdefs.get(instance_id)


def start(router):
    worker = Worker(router)
    worker.loop()


def main():
    router = DEFAULT_ROUTER
    if len(sys.argv) > 1:
        router = sys.argv[1]
    
    if len(sys.argv) > 2:
        from multiprocessing import Process

        processes = []
        for x in range(int(sys.argv[2])):
            process = Process(target=start, args=[router])
            process.start()
            processes.append(process)
        for process in processes:
            process.join()


    start(router)



main()
